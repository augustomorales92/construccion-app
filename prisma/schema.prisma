generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  ADMIN
  CLIENT
  MANAGER
}

model User {
  id               String           @id @default(uuid())
  email            String           @unique
  name             String?
  role             Role             @default(CLIENT)
  works            UserWork[]
  incidents        Incident[]
  progressUpdates  ProgressUpdate[]
  notifications    Notification[]
  messagesSent     Message[]        @relation("Sender")
  messagesReceived Message[]        @relation("Receiver")
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@map("users")
}

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

model Work {
  id              String           @id @default(uuid())
  name            String
  description     String?
  address         String?
  budget          Float?
  accessCode      String           @unique @default(uuid())
  phoneManager    String?
  status          Status           @default(PENDING)
  startDate       DateTime?
  endDate         DateTime?
  images          String[]         @default([])
  files           String[]         @default([])
  certificates    String[]         @default([])
  items           WorkItem[]
  users           UserWork[]
  incidents       Incident[]
  progressUpdates ProgressUpdate[]
  customerId      String?
  customer        Customer?        @relation(fields: [customerId], references: [id])
  notifications   Notification[]
  messages        Message[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@map("works")
}

model UserWork {
  userId String
  user   User   @relation(fields: [userId], references: [id])
  workId String
  work   Work   @relation(fields: [workId], references: [id])

  @@id([userId, workId])
  @@map("users_works")
}

model Incident {
  id          String   @id @default(uuid())
  description String
  date        DateTime @default(now())
  workId      String
  work        Work     @relation(fields: [workId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("incidents")
}

model WorkItem {
  id          String   @id @default(uuid())
  section     String?
  description String
  unit        String?
  quantity    Float?
  price       Float?
  percentage  Float    @default(0)
  workId      String
  work        Work     @relation(fields: [workId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("work_items")
}

model ProgressUpdate {
  id           String               @id @default(uuid())
  workId       String
  work         Work                 @relation(fields: [workId], references: [id])
  userId       String
  user         User                 @relation(fields: [userId], references: [id])
  date         DateTime             @default(now())
  itemsUpdates Json?
  status       ProgressUpdateStatus @default(PENDING)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  @@map("progress_updates")
}

enum ProgressUpdateStatus {
  PENDING
  APPROVED
  REJECTED
}

model Notification {
  id        String   @id @default(uuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  workId    String?
  work      Work?    @relation(fields: [workId], references: [id])
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}

model Customer {
  id        String   @id @default(uuid())
  name      String
  email     String?
  phone     String?
  address   String?
  works     Work[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("customers")
}

model Message {
  id         String   @id @default(uuid())
  senderId   String
  sender     User     @relation("Sender", fields: [senderId], references: [id])
  receiverId String
  receiver   User     @relation("Receiver", fields: [receiverId], references: [id])
  workId     String?
  work       Work?    @relation(fields: [workId], references: [id])
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("messages")
}
